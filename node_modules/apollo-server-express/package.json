{
  "_from": "apollo-server-express",
  "_id": "apollo-server-express@2.4.8",
  "_inBundle": false,
  "_integrity": "sha512-i60l32mfVe33jnKDPNYgUKUKu4Al0xEm2HLOSMgtJ9Wbpe/MbOx5X8M5F27fnHYdM+G5XfAErsakAyRGnQJ48Q==",
  "_location": "/apollo-server-express",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "apollo-server-express",
    "fetchSpec": "latest",
    "name": "apollo-server-express",
    "raw": "apollo-server-express",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/apollo-server"
  ],
  "_resolved": "https://registry.npmjs.org/apollo-server-express/-/apollo-server-express-2.4.8.tgz",
  "_shasum": "ec9eb61a87324555d49097e9fade3c7d142eb6cb",
  "_shrinkwrap": null,
  "_spec": "apollo-server-express",
  "_where": "/home/jcgp/Escritorio/apolloServer1",
  "author": {
    "name": "opensource@apollographql.com"
  },
  "bugs": {
    "url": "https://github.com/apollographql/apollo-server/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@apollographql/graphql-playground-html": "^1.6.6",
    "@types/accepts": "^1.3.5",
    "@types/body-parser": "1.17.0",
    "@types/cors": "^2.8.4",
    "@types/express": "4.16.1",
    "accepts": "^1.3.5",
    "apollo-server-core": "2.4.8",
    "body-parser": "^1.18.3",
    "cors": "^2.8.4",
    "graphql-subscriptions": "^1.0.0",
    "graphql-tools": "^4.0.0",
    "type-is": "^1.6.16"
  },
  "deprecated": false,
  "description": "Production-ready Node.js GraphQL server for Express and Connect",
  "devDependencies": {
    "apollo-server-integration-testsuite": "2.4.8"
  },
  "engines": {
    "node": ">=6"
  },
  "gitHead": "046327068b5cbb2d80c3865cdb2566654ea988c9",
  "homepage": "https://github.com/apollographql/apollo-server#readme",
  "keywords": [
    "Apollo",
    "Connect",
    "Express",
    "GraphQL",
    "Javascript",
    "Server"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "apollo-server-express",
  "optionalDependencies": {},
  "peerDependencies": {
    "graphql": "^0.12.0 || ^0.13.0 || ^14.0.0"
  },
  "readme": "---\ntitle: Express / Connect\ndescription: Setting up Apollo Server with Express.js or Connect\n---\n\n[![npm version](https://badge.fury.io/js/apollo-server-express.svg)](https://badge.fury.io/js/apollo-server-express) [![Build Status](https://circleci.com/gh/apollographql/apollo-server.svg?style=svg)](https://circleci.com/gh/apollographql/apollo-server) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/apollo)\n\n\nThis is the Express and Connect integration of GraphQL Server. Apollo Server is a community-maintained open-source GraphQL server that works with many Node.js HTTP server frameworks. [Read the docs](https://www.apollographql.com/docs/apollo-server/). [Read the CHANGELOG.](https://github.com/apollographql/apollo-server/blob/master/CHANGELOG.md)\n\n```sh\nnpm install apollo-server-express\n```\n\n## Express\n\n```js\nconst express = require('express');\nconst { ApolloServer, gql } = require('apollo-server-express');\n\n// Construct a schema, using GraphQL schema language\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n\n// Provide resolver functions for your schema fields\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!',\n  },\n};\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\nconst app = express();\nserver.applyMiddleware({ app });\n\napp.listen({ port: 4000 }, () =>\n  console.log(`ðŸš€ Server ready at http://localhost:4000${server.graphqlPath}`)\n);\n```\n\n## Connect\n\n```js\nconst connect = require('connect');\nconst { ApolloServer, gql } = require('apollo-server-express');\nconst query = require('qs-middleware');\n\n// Construct a schema, using GraphQL schema language\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n\n// Provide resolver functions for your schema fields\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!',\n  },\n};\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\nconst app = connect();\nconst path = '/graphql';\n\napp.use(query());\nserver.applyMiddleware({ app, path });\n\napp.listen({ port: 4000 }, () =>\n  console.log(`ðŸš€ Server ready at http://localhost:4000${server.graphqlPath}`)\n);\n```\n\n> Note; `qs-middleware` is only required if running outside of Meteor\n\n## Principles\n\nGraphQL Server is built with the following principles in mind:\n\n* **By the community, for the community**: GraphQL Server's development is driven by the needs of developers\n* **Simplicity**: by keeping things simple, GraphQL Server is easier to use, easier to contribute to, and more secure\n* **Performance**: GraphQL Server is well-tested and production-ready - no modifications needed\n\nAnyone is welcome to contribute to GraphQL Server, just read [CONTRIBUTING.md](https://github.com/apollographql/apollo-server/blob/master/CONTRIBUTING.md), take a look at the [roadmap](https://github.com/apollographql/apollo-server/blob/master/ROADMAP.md) and make your first PR!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/apollographql/apollo-server/tree/master/packages/apollo-server-express"
  },
  "types": "dist/index.d.ts",
  "version": "2.4.8"
}
